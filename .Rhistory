knnmodel = knn(train=Xtrainsc, test= Xtestsc, cl=ytrain, k=120)
knnpred = as.numeric(levels(knnmodel))[as.integer(knnmodel)]
lmmodel = lm(price ~ lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age , data=fulltrain)
lm_pred = predict(lmmodel, fulltest)
}
modelcom = cbind(ytest, lm_pred, knnpred)
}
variance = do(100)*{{train_ind = sample.int(n, n_train, replace = FALSE)
fulltrain = Housing[train_ind,]
Xtrain = X[train_ind,]
Xtest = X[-train_ind,]
fulltest = Housing[-train_ind,]
ytrain = y[train_ind]
ytest = y[-train_ind]
# scale the training set features
scale_factors = apply(Xtrain, 2, sd)
Xtrainsc = scale(Xtrain, scale=scale_factors)
# scale the test set features using the same scale factors
Xtestsc = scale(Xtest, scale=scale_factors)
knnmodel = knn(train=Xtrainsc, test= Xtestsc, cl=ytrain, k=120)
knnpred = as.numeric(levels(knnmodel))[as.integer(knnmodel)]
lmmodel = lm(price ~ lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age , data=fulltrain)
lm_pred = predict(lmmodel, fulltest)
}
modelcom = cbind(ytest, lm_pred, knnpred)
}
variance = do(100)*{{train_ind = sample.int(n, n_train, replace = FALSE)
fulltrain = Housing[train_ind,]
Xtrain = X[train_ind,]
Xtest = X[-train_ind,]
fulltest = Housing[-train_ind,]
ytrain = y[train_ind]
ytest = y[-train_ind]
# scale the training set features
scale_factors = apply(Xtrain, 2, sd)
Xtrainsc = scale(Xtrain, scale=scale_factors)
# scale the test set features using the same scale factors
Xtestsc = scale(Xtest, scale=scale_factors)
knnmodel = knn(train=Xtrainsc, test= Xtestsc, cl=ytrain, k=120)
knnpred = as.numeric(levels(knnmodel))[as.integer(knnmodel)]
lmmodel = lm(price ~ lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age , data=fulltrain)
lm_pred = predict(lmmodel, fulltest)
}
modelcom = cbind(ytest, lm_pred, knnpred)
}
library(tidyverse)
library(mosaic)
library(ggplot2)
library(foreach)
library(class)
variance = do(100)*{{train_ind = sample.int(n, n_train, replace = FALSE)
fulltrain = Housing[train_ind,]
Xtrain = X[train_ind,]
Xtest = X[-train_ind,]
fulltest = Housing[-train_ind,]
ytrain = y[train_ind]
ytest = y[-train_ind]
# scale the training set features
scale_factors = apply(Xtrain, 2, sd)
Xtrainsc = scale(Xtrain, scale=scale_factors)
# scale the test set features using the same scale factors
Xtestsc = scale(Xtest, scale=scale_factors)
knnmodel = knn(train=Xtrainsc, test= Xtestsc, cl=ytrain, k=120)
knnpred = as.numeric(levels(knnmodel))[as.integer(knnmodel)]
lmmodel = lm(price ~ lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age , data=fulltrain)
lm_pred = predict(lmmodel, fulltest)
}
modelcom = cbind(ytest, lm_pred, knnpred)
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(mosaic)
library(ggplot2)
library(foreach)
library(class)
library(reshape2)
library(plotly)
variance = do(100)*{{train_ind = sample.int(n, n_train, replace = FALSE)
fulltrain = Housing[train_ind,]
Xtrain = X[train_ind,]
Xtest = X[-train_ind,]
fulltest = Housing[-train_ind,]
ytrain = y[train_ind]
ytest = y[-train_ind]
# scale the training set features
scale_factors = apply(Xtrain, 2, sd)
Xtrainsc = scale(Xtrain, scale=scale_factors)
# scale the test set features using the same scale factors
Xtestsc = scale(Xtest, scale=scale_factors)
knnmodel = knn(train=Xtrainsc, test= Xtestsc, cl=ytrain, k=120)
knnpred = as.numeric(levels(knnmodel))[as.integer(knnmodel)]
lmmodel = lm(price ~ lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age , data=fulltrain)
lm_pred = predict(lmmodel, fulltest)
}
modelcom = cbind(ytest, lm_pred, knnpred)
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(mosaic)
library(ggplot2)
library(foreach)
library(class)
variance = do(100)*{{train_ind = sample.int(n, n_train, replace = FALSE)
fulltrain = Housing[train_ind,]
Xtrain = X[train_ind,]
Xtest = X[-train_ind,]
fulltest = Housing[-train_ind,]
ytrain = y[train_ind]
ytest = y[-train_ind]
# scale the training set features
scale_factors = apply(Xtrain, 2, sd)
Xtrainsc = scale(Xtrain, scale=scale_factors)
# scale the test set features using the same scale factors
Xtestsc = scale(Xtest, scale=scale_factors)
knnmodel = knn(train=Xtrainsc, test= Xtestsc, cl=ytrain, k=120)
knnpred = as.numeric(levels(knnmodel))[as.integer(knnmodel)]
lmmodel = lm(price ~ lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age , data=fulltrain)
lm_pred = predict(lmmodel, fulltest)
}
modelcom = cbind(ytest, lm_pred, knnpred)
}
variance = do(100)*{{train_ind = sample.int(n, n_train, replace = FALSE)
fulltrain = Housing[train_ind,]
Xtrain = X[train_ind,]
Xtest = X[-train_ind,]
fulltest = Housing[-train_ind,]
ytrain = y[train_ind]
ytest = y[-train_ind]
# scale the training set features
scale_factors = apply(Xtrain, 2, sd)
Xtrainsc = scale(Xtrain, scale=scale_factors)
# scale the test set features using the same scale factors
Xtestsc = scale(Xtest, scale=scale_factors)
knnmodel = knn(train=Xtrainsc, test= Xtestsc, cl=ytrain, k=120)
knnpred = as.numeric(levels(knnmodel))[as.integer(knnmodel)]
lmmodel = lm(price ~ lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age , data=fulltrain)
lm_pred = predict(lmmodel, fulltest)
}
## modelcom = cbind(ytest, lm_pred, knnpred)
}
detach("package:reshape2", unload = TRUE)
variance = do(100)*{{train_ind = sample.int(n, n_train, replace = FALSE)
fulltrain = Housing[train_ind,]
Xtrain = X[train_ind,]
Xtest = X[-train_ind,]
fulltest = Housing[-train_ind,]
ytrain = y[train_ind]
ytest = y[-train_ind]
# scale the training set features
scale_factors = apply(Xtrain, 2, sd)
Xtrainsc = scale(Xtrain, scale=scale_factors)
# scale the test set features using the same scale factors
Xtestsc = scale(Xtest, scale=scale_factors)
knnmodel = knn(train=Xtrainsc, test= Xtestsc, cl=ytrain, k=120)
knnpred = as.numeric(levels(knnmodel))[as.integer(knnmodel)]
lmmodel = lm(price ~ lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age , data=fulltrain)
lm_pred = predict(lmmodel, fulltest)
}
## modelcom = cbind(ytest, lm_pred, knnpred)
}
detach("package:plotly", unload = TRUE)
detach("package:tidyr", unload = TRUE)
detach("package:tidyverse", unload = TRUE)
detach("package:mosaic", unload = TRUE)
detach("package:mosaicData", unload = TRUE)
detach("package:foreach", unload = TRUE)
detach("package:class", unload = TRUE)
variance = do(100)*{{train_ind = sample.int(n, n_train, replace = FALSE)
fulltrain = Housing[train_ind,]
Xtrain = X[train_ind,]
Xtest = X[-train_ind,]
fulltest = Housing[-train_ind,]
ytrain = y[train_ind]
ytest = y[-train_ind]
# scale the training set features
scale_factors = apply(Xtrain, 2, sd)
Xtrainsc = scale(Xtrain, scale=scale_factors)
# scale the test set features using the same scale factors
Xtestsc = scale(Xtest, scale=scale_factors)
knnmodel = knn(train=Xtrainsc, test= Xtestsc, cl=ytrain, k=120)
knnpred = as.numeric(levels(knnmodel))[as.integer(knnmodel)]
lmmodel = lm(price ~ lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age , data=fulltrain)
lm_pred = predict(lmmodel, fulltest)
}
## modelcom = cbind(ytest, lm_pred, knnpred)
}
library(mosaic)
variance = do(100)*{{train_ind = sample.int(n, n_train, replace = FALSE)
fulltrain = Housing[train_ind,]
Xtrain = X[train_ind,]
Xtest = X[-train_ind,]
fulltest = Housing[-train_ind,]
ytrain = y[train_ind]
ytest = y[-train_ind]
# scale the training set features
scale_factors = apply(Xtrain, 2, sd)
Xtrainsc = scale(Xtrain, scale=scale_factors)
# scale the test set features using the same scale factors
Xtestsc = scale(Xtest, scale=scale_factors)
knnmodel = knn(train=Xtrainsc, test= Xtestsc, cl=ytrain, k=120)
knnpred = as.numeric(levels(knnmodel))[as.integer(knnmodel)]
lmmodel = lm(price ~ lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age , data=fulltrain)
lm_pred = predict(lmmodel, fulltest)
}
## modelcom = cbind(ytest, lm_pred, knnpred)
}
library(class, lib.loc = "C:/Program Files/R/R-3.6.1/library")
variance = do(100)*{{train_ind = sample.int(n, n_train, replace = FALSE)
fulltrain = Housing[train_ind,]
Xtrain = X[train_ind,]
Xtest = X[-train_ind,]
fulltest = Housing[-train_ind,]
ytrain = y[train_ind]
ytest = y[-train_ind]
# scale the training set features
scale_factors = apply(Xtrain, 2, sd)
Xtrainsc = scale(Xtrain, scale=scale_factors)
# scale the test set features using the same scale factors
Xtestsc = scale(Xtest, scale=scale_factors)
knnmodel = knn(train=Xtrainsc, test= Xtestsc, cl=ytrain, k=120)
knnpred = as.numeric(levels(knnmodel))[as.integer(knnmodel)]
lmmodel = lm(price ~ lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age , data=fulltrain)
lm_pred = predict(lmmodel, fulltest)
}
## modelcom = cbind(ytest, lm_pred, knnpred)
}
knitr::opts_chunk$set(echo = TRUE)
library(mosaic)
library(ggplot2)
library(foreach)
library(class)
library(reshape2)
library(plotly)
variance = do(100)*{{train_ind = sample.int(n, n_train, replace = FALSE)
fulltrain = Housing[train_ind,]
Xtrain = X[train_ind,]
Xtest = X[-train_ind,]
fulltest = Housing[-train_ind,]
ytrain = y[train_ind]
ytest = y[-train_ind]
# scale the training set features
scale_factors = apply(Xtrain, 2, sd)
Xtrainsc = scale(Xtrain, scale=scale_factors)
# scale the test set features using the same scale factors
Xtestsc = scale(Xtest, scale=scale_factors)
knnmodel = knn(train=Xtrainsc, test= Xtestsc, cl=ytrain, k=120)
knnpred = as.numeric(levels(knnmodel))[as.integer(knnmodel)]
lmmodel = lm(price ~ lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age , data=fulltrain)
lm_pred = predict(lmmodel, fulltest)
}
modelcom = cbind(ytest, lm_pred, knnpred)
}
variance$lm_sqerror = (variance$ytest-variance$lm_pred)^2
variance$knn_sqerror = (variance$ytest-variance$knnpred)^2
variance <- within(variance, Percentile <- as.integer(cut(ytest, quantile(ytest, probs=0:20/20), include.lowest=TRUE)))
var = variance %>%
group_by(Percentile)  %>%  # group the data points by model nae
summarize(lm_rmse = sqrt(mean((lm_sqerror))),
knn_rmse = sqrt(mean((knn_sqerror))))
var$Percentile= (var$Percentile*5)
variance = do(100)*{{train_ind = sample.int(n, n_train, replace = FALSE)
fulltrain = Housing[train_ind,]
Xtrain = X[train_ind,]
Xtest = X[-train_ind,]
fulltest = Housing[-train_ind,]
ytrain = y[train_ind]
ytest = y[-train_ind]
# scale the training set features
scale_factors = apply(Xtrain, 2, sd)
Xtrainsc = scale(Xtrain, scale=scale_factors)
# scale the test set features using the same scale factors
Xtestsc = scale(Xtest, scale=scale_factors)
knnmodel = knn(train=Xtrainsc, test= Xtestsc, cl=ytrain, k=120)
knnpred = as.numeric(levels(knnmodel))[as.integer(knnmodel)]
lmmodel = lm(price ~ lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age , data=fulltrain)
lm_pred = predict(lmmodel, fulltest)
}
modelcom = cbind(ytest, lm_pred, knnpred)
}
library(tidyverse)
library(mosaic)
library(ggplot2)
library(foreach)
library(class)
library(reshape2)
library(tidyverse)
library(mosaic)
library(ggplot2)
library(foreach)
library(class)
library(reshape2)
library(tidyverse)
library(mosaic)
library(ggplot2)
library(foreach)
library(class)
library(reshape2)
variance = do(100)*{{train_ind = sample.int(n, n_train, replace = FALSE)
fulltrain = Housing[train_ind,]
Xtrain = X[train_ind,]
Xtest = X[-train_ind,]
fulltest = Housing[-train_ind,]
ytrain = y[train_ind]
ytest = y[-train_ind]
# scale the training set features
scale_factors = apply(Xtrain, 2, sd)
Xtrainsc = scale(Xtrain, scale=scale_factors)
# scale the test set features using the same scale factors
Xtestsc = scale(Xtest, scale=scale_factors)
knnmodel = knn(train=Xtrainsc, test= Xtestsc, cl=ytrain, k=120)
knnpred = as.numeric(levels(knnmodel))[as.integer(knnmodel)]
lmmodel = lm(price ~ lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age , data=fulltrain)
lm_pred = predict(lmmodel, fulltest)
}
modelcom = cbind(ytest, lm_pred, knnpred)
}
variance$lm_sqerror = (variance$ytest-variance$lm_pred)^2
variance$knn_sqerror = (variance$ytest-variance$knnpred)^2
variance <- within(variance, Percentile <- as.integer(cut(ytest, quantile(ytest, probs=0:20/20), include.lowest=TRUE)))
var = variance %>%
group_by(Percentile)  %>%  # group the data points by model nae
summarize(lm_rmse = sqrt(mean((lm_sqerror))),
knn_rmse = sqrt(mean((knn_sqerror))))
var$Percentile= (var$Percentile*5)
vardata = melt(var, "Percentile")
ggplotly(ggplot(data=vardata, aes(x=Percentile, y=value , fill = variable)) +
geom_bar(stat="identity", position ="identity", alpha=.3 ))
library(plotly)
ggplotly(ggplot(variance)+geom_col(mapping= aes(x= ytest, y = lm_sqerror)))
ggplot(data=vardata, aes(x=Percentile, y=value , fill = variable)) +
geom_bar(stat="identity", position ="identity", alpha=.3 )
write.csv(vardata, file = "vardata.csv")
knitr::opts_chunk$set(echo = TRUE)
library(mosaic)
library(ggplot2)
library(foreach)
library(class)
library(reshape2)
library(plotly)
vardata = read.csv("vardata.csv")
ggplotly(ggplot(data=vardata, aes(x=Percentile, y=value , fill = variable)) +
geom_bar(stat="identity", position ="identity", alpha=.3 )+
labs(title="RMSE of Prediction at Different Percentiles of Prices",
subtitle = "Bin width = 5 percentile",
x="Prices Percentile",
y = "Mean RMSE")+
theme(
plot.title = element_text(hjust = 0.5) ))
vardata = read.csv("vardata.csv")
ggplotly(ggplot(data=vardata, aes(x=Percentile, y=value , fill = variable)) +
geom_bar(stat="identity", position ="identity", alpha=.3 )+
labs(title="RMSE of Prediction at Different Percentiles of Prices",
caption = "Bin width = 5 percentile",
x="Prices Percentile",
y = "Mean RMSE")+
theme(
plot.title = element_text(hjust = 0.5) ))
variance <- within(variance, Percentile <- as.integer(cut(ytest, quantile(ytest, probs=0:20/20), include.lowest=TRUE)))
var = variance %>%
group_by(Percentile)  %>%  # group the data points by model nae
summarize(lm_rmse = sqrt(mean((lm_sqerror))),
knn_rmse = sqrt(mean((knn_sqerror))))
var$Percentile= (var$Percentile*5)-5
vardata = melt(var, "Percentile")
ggplot(data=vardata, aes(x=Percentile, y=value , fill = variable)) +
geom_bar(stat="identity", position ="identity", alpha=.3 )
write.csv(vardata, file = "vardata.csv")
vardata = read.csv("vardata.csv")
ggplotly(ggplot(data=vardata, aes(x=Percentile, y=value , fill = variable)) +
geom_bar(stat="identity", position ="identity", alpha=.3 )+
labs(title="RMSE of Prediction at Different Percentiles of Prices",
caption = "Bin width = 5 percentile",
x="Prices Percentile",
y = "Mean RMSE")+
theme(
plot.title = element_text(hjust = 0.5) ))
Test1= train_ind = sample.int(n, n_train, replace = FALSE)
fulltrn = Housing[train_ind,]
Xtra = X[train_ind,]
Xtst = X[-train_ind,]
fulltst = Housing[-train_ind,]
ytrn = y[train_ind]
actual = y[-train_ind]
# scale the training set features
scale_factors = apply(Xtra, 2, sd)
Xtrasc = scale(Xtra, scale=scale_factors)
# scale the test set features using the same scale factors
Xtstsc = scale(Xtst, scale=scale_factors)
knnmodel = knn(train=Xtrasc, test= Xtstsc, cl=ytrn, k=135)
knnpredict = as.numeric(levels(knnmodel))[as.integer(knnmodel)]
lmmodel = lm(price ~ lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age , data=fulltrn)
lm_predict = predict(lmmodel, fulltst)
RMSE_LM = rmse(fulltst$price, lm_predict)
RMSE_Knn = rmse(actual, knnpredict)
PvAtest= melt(data.frame(cbind(actual, lm_predict, knnpredict)), "actual" )
### Predicted vs Actual Plot
ggplotly(ggplot(data= PvAtest)+ geom_point(mapping = aes(x=actual, y= value, color= variable), alpha = 0.3)+
geom_abline(intercept= 0, slope=1,)+
labs(title="Actual vs Predicted Plot",
caption = "Plot for both LM and KNN model",
x="Actual Prices",
y = "Predicted Prices")+
theme(
plot.title = element_text(hjust = 0.5)))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(mosaic)
library(ggplot2)
library(foreach)
library(class)
library(reshape2)
library(plotly)
Housing= read.csv("Housing.csv")
Housing$extrarooms = Housing$rooms-Housing$bedrooms
Housing$C_air= ifelse(Housing$centralAir == "Yes", 1, 0)
Housing$new_c= ifelse(Housing$newConstruction == "Yes", 1, 0)
Housing$heating_electric = ifelse(Housing$heating == "electric", 1, 0)
Housing$heating_hotair = ifelse(Housing$heating == "hot air", 1, 0)
Housing$heating_watersteam = ifelse(Housing$heating == "hot water/steam", 1, 0)
n = nrow(Housing)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
rmse = function(y, yhat) {
sqrt( mean( (y - yhat)^2 ) )}
Mean_medium = do(1000)*{
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
Housing_train = Housing[train_cases,]
Housing_test = Housing[test_cases,]
lm_medium = lm(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir, data=Housing_train)
yhat_test = predict(lm_medium, Housing_test)
rmse(Housing_test$price, yhat_test)}
library(tidyverse)
Mean_rmse = do(1000)*{
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
Housing_train = Housing[train_cases,]
Housing_test = Housing[test_cases,]
lmbase = lm(price ~ landValue+lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age+ pctCollege , data=Housing_train)
### Option 1 Livingperlotsize + lotSize+ centralAir + heating + extrarooms +
## age + bedrooms +  bathperbed , data = Housing)
yhat_test = predict(lmbase, Housing_test)
rmse(Housing_test$price, yhat_test)}
mean(Mean_rmse$result, na.rm = TRUE)
library(mosaic)
Mean_rmse = do(1000)*{
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
Housing_train = Housing[train_cases,]
Housing_test = Housing[test_cases,]
lmbase = lm(price ~ landValue+lotSize+ livingArea+ bedrooms+ bathrooms+ extrarooms + centralAir + heating + age+ newConstruction+
fireplaces + fuel + age+ pctCollege , data=Housing_train)
### Option 1 Livingperlotsize + lotSize+ centralAir + heating + extrarooms +
## age + bedrooms +  bathperbed , data = Housing)
yhat_test = predict(lmbase, Housing_test)
rmse(Housing_test$price, yhat_test)}
mean(Mean_rmse$result, na.rm = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(mosaic)
library(ggplot2)
library(foreach)
library(class)
library(plotly)
Housing= read.csv("Housing.csv")
Housing$extrarooms = Housing$rooms-Housing$bedrooms
Housing$C_air= ifelse(Housing$centralAir == "Yes", 1, 0)
Housing$new_c= ifelse(Housing$newConstruction == "Yes", 1, 0)
Housing$heating_electric = ifelse(Housing$heating == "electric", 1, 0)
Housing$heating_hotair = ifelse(Housing$heating == "hot air", 1, 0)
Housing$heating_watersteam = ifelse(Housing$heating == "hot water/steam", 1, 0)
n = nrow(Housing)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
rmse = function(y, yhat) {
sqrt( mean( (y - yhat)^2 ) )}
Mean_medium = do(1000)*{
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
Housing_train = Housing[train_cases,]
Housing_test = Housing[test_cases,]
lm_medium = lm(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir, data=Housing_train)
yhat_test = predict(lm_medium, Housing_test)
rmse(Housing_test$price, yhat_test)}
Mean_medium = do(1000)*{
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
Housing_train = Housing[train_cases,]
Housing_test = Housing[test_cases,]
lm_medium = lm(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir, data=Housing_train)
yhat_test = predict(lm_medium, Housing_test)
rmse(Housing_test$price, yhat_test)}
mean(Mean_medium$result, na.rm = TRUE)
