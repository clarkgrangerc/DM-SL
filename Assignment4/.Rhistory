library(kableExtra)
library(randomForest)
library(gbm)
library(ggplot2)
library(ggrepel)
library(plotmo)
data=read.csv("covid2zargham.csv")
names=read.table("names.txt")
cnames=names[,1]
colnames(data)=cnames
#### Create the subsample for training an testing ####
x<- data[-c(1:5,35)]
library(mosaic)
library(tidyverse)
library(Metrics)
library(gamlr)
library(margins)
library(rpart)
library(caret)
library(knitr)
library(kableExtra)
library(randomForest)
library(gbm)
library(ggplot2)
library(ggrepel)
library(plotmo)
data=read.csv("covid2zargham.csv")
names=read.table("names.txt")
cnames=names[,1]
colnames(data)=cnames
#### Create the subsample for training an testing ####
x<- data[-c(1:5,35)]
library(factoextra)
covid = read.csv("covid2zargham.csv")
X= covid[,-c(1:5, 35,37)]
PCA = prcomp(X, scale. = TRUE)
fviz_pca_var(PCA, col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),select.var = list(contrib=12),
repel = TRUE, title = "Variables Contribution in first two PCAs " )
library(factoextra)
covid = read.csv("covid2zargham.csv")
X= covid[,-c(1:5, 35,37)]
PCA = prcomp(X, scale. = TRUE)
fviz_pca_var(PCA, col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),select.var = list(contrib=12),
repel = TRUE, title = "Variables Contribution in first two PCAs " )
library(factoextra)
covid = read.csv("covid2zargham.csv")
X= covid[,-c(1:5, 35,37)]
PCA = prcomp(X, scale. = TRUE)
fviz_pca_var(PCA, col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),select.var = list(contrib=12),
repel = TRUE, title = "Variables Contribution in first two PCAs " )
library(VGAM)
covid1 = covid[,-c(1:5, 35)]
m12 <- vglm(cases1 ~ ., family = pospoisson(), data = covid1)
summary(m12)
library(ggplot2)
library(ggrepel)
time1= read.csv("casesperpop.csv")
ggplot(time1, mapping = aes(x = Combined_Key, y = value))+geom_line(aes(color = variable), size = 0.8) +
theme(legend.position = "none")+xlim(0, 120)+geom_text_repel(data = subset(time1, Combined_Key == max(Combined_Key)),aes(label= variable),nudge_x = 30,segment.color = NA, size=6)+labs(
caption = "Counties with same infection dates",
x="Days since first Infection",
y = "No. of Cases per 100K Pop")+
coord_cartesian(xlim = c(50, 100 + 10))
library(ggplot2)
library(ggrepel)
time1= read.csv("casesperpop.csv")
ggplot(time1, mapping = aes(x = Combined_Key, y = value))+geom_line(aes(color = variable), size = 0.8) +
theme(legend.position = "none")+xlim(0, 120)+geom_text_repel(data = subset(time1, Combined_Key == max(Combined_Key)),aes(label= variable),nudge_x = 30,segment.color = NA, size=2)+labs(
caption = "Counties with same infection dates",
x="Days since first Infection",
y = "No. of Cases per 100K Pop")+
coord_cartesian(xlim = c(50, 100 + 10))
library(ggplot2)
library(ggrepel)
time1= read.csv("casesperpop.csv")
ggplot(time1, mapping = aes(x = Combined_Key, y = value))+geom_line(aes(color = variable), size = 0.8) +
theme(legend.position = "none")+xlim(0, 120)+geom_text_repel(data = subset(time1, Combined_Key == max(Combined_Key)),aes(label= variable),nudge_x = 5,segment.color = NA, size=3)+labs(
caption = "Counties with same infection dates",
x="Days since first Infection",
y = "No. of Cases per 100K Pop")+
coord_cartesian(xlim = c(50, 100 + 10))
library(ggplot2)
library(ggrepel)
time1= read.csv("casesperpop.csv")
ggplot(time1, mapping = aes(x = Combined_Key, y = value, color = variable))+geom_line(aes(size = 0.8) +
theme(legend.position = "none")+xlim(0, 120)+geom_text_repel(data = subset(time1, Combined_Key == max(Combined_Key)),aes(label= variable),nudge_x = 5,segment.color = NA, size=1)+labs(
caption = "Counties with same infection dates",
x="Days since first Infection",
y = "No. of Cases per 100K Pop")+
coord_cartesian(xlim = c(50, 100 + 10))
library(ggplot2)
library(ggrepel)
time1= read.csv("casesperpop.csv")
ggplot(time1, mapping = aes(x = Combined_Key, y = value, color = variable))+geom_line(aes(size = 0.8)) +
theme(legend.position = "none")+xlim(0, 120)+geom_text_repel(data = subset(time1, Combined_Key == max(Combined_Key)),aes(label= variable),nudge_x = 5,segment.color = NA, size=1)+labs(
caption = "Counties with same infection dates",
x="Days since first Infection",
y = "No. of Cases per 100K Pop")+
coord_cartesian(xlim = c(50, 100 + 10))
library(ggplot2)
library(ggrepel)
time1= read.csv("casesperpop.csv")
ggplot(time1, mapping = aes(x = Combined_Key, y = value, color = variable))+geom_line() +
theme(legend.position = "none")+xlim(0, 120)+geom_text_repel(data = subset(time1, Combined_Key == max(Combined_Key)),aes(label= variable),nudge_x = 5,segment.color = NA, size=1)+labs(
caption = "Counties with same infection dates",
x="Days since first Infection",
y = "No. of Cases per 100K Pop")+
coord_cartesian(xlim = c(50, 100 + 10))
library(ggplot2)
library(ggrepel)
time1= read.csv("casesperpop.csv")
ggplot(time1, mapping = aes(x = Combined_Key, y = value, color = variable))+geom_line() +
theme(legend.position = "none")+xlim(0, 120)+geom_text_repel(data = subset(time1, Combined_Key == max(Combined_Key)),aes(label= variable),nudge_x = 5,segment.color = NA, size=2)+labs(
caption = "Counties with same infection dates",
x="Days since first Infection",
y = "No. of Cases per 100K Pop")+
coord_cartesian(xlim = c(50, 100 + 10))
library(ggplot2)
library(ggrepel)
time1= read.csv("casesperpop.csv")
ggplot(time1, mapping = aes(x = Combined_Key, y = value, color = variable))+geom_line() +
theme(legend.position = "none")+xlim(0, 120)+geom_text_repel(data = subset(time1, Combined_Key == max(Combined_Key)),aes(label= variable),nudge_x = 5,segment.color = NA, size=2, direction= "y",hjust= 0)+labs(
caption = "Counties with same infection dates",
x="Days since first Infection",
y = "No. of Cases per 100K Pop")+
coord_cartesian(xlim = c(50, 100 + 10))
library(ggplot2)
library(ggrepel)
time1= read.csv("casesperpop.csv")
ggplot(time1, mapping = aes(x = Combined_Key, y = value, color = variable))+geom_line() +
theme(legend.position = "none")+xlim(0, 120)+geom_text_repel(data = subset(time1, Combined_Key == max(Combined_Key)),aes(label= variable),nudge_x =0,segment.color = NA, size=2, direction= "y",hjust= 0)+labs(
caption = "Counties with same infection dates",
x="Days since first Infection",
y = "No. of Cases per 100K Pop")+
coord_cartesian(xlim = c(50, 100 + 10))
library(ggplot2)
library(ggrepel)
time1= read.csv("casesperpop.csv")
ggplot(time1, mapping = aes(x = Combined_Key, y = value, color = variable))+geom_line() +
theme(legend.position = "none")+xlim(0, 120)+geom_text_repel(data = subset(time1, Combined_Key == max(Combined_Key)),aes(label= variable),nudge_x =5,segment.color = NA, size=2, direction= "y",hjust= 0)+labs(
caption = "Counties with same infection dates",
x="Days since first Infection",
y = "No. of Cases per 100K Pop")+
coord_cartesian(xlim = c(50, 100 + 10))
library(ggplot2)
library(ggrepel)
time1= read.csv("casesperpop.csv")
ggplot(time1, mapping = aes(x = Combined_Key, y = value, color = variable))+geom_line() +
theme(legend.position = "none")+xlim(0, 110)+geom_text_repel(data = subset(time1, Combined_Key == max(Combined_Key)),aes(label= variable),nudge_x =5,segment.color = NA, size=2, direction= "y",hjust= 0)+labs(
caption = "Counties with same infection dates",
x="Days since first Infection",
y = "No. of Cases per 100K Pop")+
coord_cartesian(xlim = c(50, 100 + 10))
library(ggplot2)
library(ggrepel)
time1= read.csv("casesperpop.csv")
ggplot(time1, mapping = aes(x = Combined_Key, y = value, color = variable))+geom_line() +
theme(legend.position = "none")+xlim(0, 110)+geom_text_repel(data = subset(time1, Combined_Key == max(Combined_Key)),aes(label= variable),nudge_x =2,segment.color = NA, size=3, direction= "y",hjust= 0)+labs(
caption = "Counties with same infection dates",
x="Days since first Infection",
y = "No. of Cases per 100K Pop")+
coord_cartesian(xlim = c(50, 100 + 10))
library(factoextra)
covid = read.csv("covid2zargham.csv")
X= covid[,-c(1:5, 35,37)]
PCA = prcomp(X, scale. = TRUE)
fviz_pca_var(PCA, col.var="contrib",labelsize = 3,
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),select.var = list(contrib=12),
repel = TRUE, title = "Variables Contribution in first two PCAs " )
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1=ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10))
b2= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10))
grid.arrange(b1,b2, widths=c(0.5, 0.5) , heights=c(0.7, 0.7),ncol = 2)
m13 <- vglm(cases ~ ., family = pospoisson(), data = covid3)
yhat2 = predict(m13, type = 'response')
modelfit2= as.data.frame(cbind(yhat2, covid3$cases))
p1= ggplot(modelfit2, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+labs(x="Actual", y= "Predicted", title = "Total Cases")+theme(plot.title = element_text(size =10))
p2=ggplot(modelfit2, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+labs(x="Actual", y= "Predicted", title = "Total Cases- Low Values")+
coord_cartesian(xlim = c(0, 20000 + 10))+theme(plot.title = element_text(size =10))
grid.arrange(p1,p2, widths=c(0.5, "npr") , heights=c(0.7, "npr"),ncol = 2)
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1=ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10))
b2= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10))
grid.arrange(b1,b2, widths=c(0.7, 0.7) , heights=c(0.7, 0.7),ncol = 2)
par(mfrow = c(3,3))
partialPlot(m2, x_train[,1:30],x.var =27, main="Population Density",xlab="",ylab="Cases per 100k")
## Random Forest and Boosting Trees
data=read.csv("covid2zargham.csv")
names=read.table("names.txt")
cnames=names[,1]
colnames(data)=cnames
#### Create the subsample for training an testing ####
x<- data[-c(1:5,35)]
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
# re-split into train and test cases with the same sample sizes
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
######################################
############ Random Forest ###########
######################################
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
m2 = randomForest(cases100k ~ (.)^2,data= x_train, mtry = 5, ntree=1000,importance=T)
plot(m2)
yhat_test2 = predict(m2, x_test)
rrf=round(rmse(x_test$cases100k,yhat_test2))
####################################
##### Boosting Model ##############
###################################
m3 = gbm(cases100k ~ .,data = x_train,n.trees=5000, shrinkage=.05)
yhat_test3= predict(m3, x_test, n.trees=5000)
rb=round(rmse(x_test$cases100k,yhat_test3))
par(mfrow = c(3,3))
partialPlot(m2, x_train[,1:30],x.var =27, main="Population Density",xlab="",ylab="Cases per 100k")
partialPlot(m2, x_train[,1:30],x.var =1, main="Days Since First Case",xlab="",xlim=c(20,60))
partialPlot(m2, x_train[,1:30],x.var =21, main="Workers driving Alone",xlab="",xlim=c(.1,.4))
partialPlot(m2, x_train[,1:30],x.var =9, main="Population White Race",xlab="",ylab="Cases per 100k")
partialPlot(m2, x_train[,1:30],x.var =26, main="Summer Max Temperature",xlab="",xlim=c(50,90))
partialPlot(m2, x_train[,1:30],x.var =5, main="Unemployment Rate",xlab="",xlim=c(0.03,0.12))
partialPlot(m2, x_train[,1:30],x.var =17, main="Occupation Food and Services",xlab="",xlim=c(0.04,0.11),ylim=c(175,195),ylab="Cases per 100k")
partialPlot(m2, x_train[,1:30],x.var =7, main="Population Male Gender",xlab="",xlim=c(0.5,.60))
partialPlot(m2, x_train[,1:30],x.var =28, main="Median Age",xlab="")
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1=ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10))
b2= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10))
grid.arrange(b1,b2, widths=c(0.7, 0.7) , heights=c(0.7, 0.7),ncol = 2)
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1=ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10))
b2= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10))
grid.arrange(b1,b2, widths=c(0.7, 0.7) , heights=c(0.7, 0.7),ncol = 2)
install.packages("gtable")
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1= ggplotGrob(ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10)))
library(mosaic)
library(tidyverse)
library(Metrics)
library(gamlr)
library(margins)
library(rpart)
library(caret)
library(knitr)
library(kableExtra)
library(randomForest)
library(gbm)
library(ggplot2)
library(ggrepel)
library(plotmo)
library(VGAM)
library(gtable)
data=read.csv("covid2zargham.csv")
names=read.table("names.txt")
cnames=names[,1]
colnames(data)=cnames
#### Create the subsample for training an testing ####
x<- data[-c(1:5,35)]
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1= ggplotGrob(ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10)))
b2= ggplotGrob(ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10)))
b= cbind(b1,b2)
##grid.arrange(b1,b2, widths=unit(c(0.7, 0.7) , heights=c(0.7, 0.7),ncol = 2)
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1= ggplotGrob(ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10)))
b2= ggplotGrob(ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10)))
b= cbind(b1,b2)
grid.draw(b)
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1= ggplotGrob(ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10)))
b2= ggplotGrob(ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10)))
b= cbind(b1,b2)
grid.draw(b)
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10))
b2= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10))
grid.arrange(b1,b2, widths=c(0.7, 0.7) , heights=c(0.7, 0.7),ncol = 2, nrow =1)
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10))
b2= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10))
grid.arrange(b1,b2, widths=c(0.7, 0.7) , heights=c(0.7, 0.7), nrow =1)
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10))
b2= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10))
grid.arrange(b1,b2, nrow =1, widths=c(0.7, 0.7) , heights=c(0.7, 0.7))
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10))
b2= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10))
grid.arrange(b1,b2, nrow =1)
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10))
b2= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10))
grid.arrange(b1,b2, nrow =1,heights=c(0.7, 0.7))
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10))
b2= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10))
grid.arrange(b1,b2, nrow =1, heights=c(1, 1))
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10))
b2= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10))
grid.arrange(b1,b2, nrow =1)
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10))
b2= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10))
grid.arrange(b1,b2, nrow =1)
yhat1 = predict(m12, type = 'response')
modelfit1= as.data.frame(cbind(yhat1, covid$cases1))
b1= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop")+theme(plot.title = element_text(size =10))
b2= ggplot(modelfit1, mapping = aes(V2, V1))+geom_point()+geom_abline(slope = 1,intercept = 0)+ labs(x="Actual", y= "Predicted", title = "Cases per 100K Pop - Low Values")+coord_cartesian(xlim = c(0, 1000 + 10))+theme(plot.title = element_text(size =10))
grid.arrange(b1,b2, nrow =1)
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
qplot(PC1,PC2, data=scores, color= V1)+scale_color_gradient(low = "grey", high= 'red')+ggtitle("Cluster Plot of Cases and First two Principal Components")+labs(color = "Cases per 100K Pop")
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
qplot(PC1,PC2, data=scores, color= V1)+scale_color_gradient(low = "grey", high= 'red')+ggtitle("Cluster Plot of Cases and First two Principal Components")+labs(color = "Cases per 100K Pop")+theme(legend.text=element_text(size=3))
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
qplot(PC1,PC2, data=scores, color= V1)+scale_color_gradient(low = "grey", high= 'red')+ggtitle("Cluster Plot of Cases and First two Principal Components")+labs(color = "Cases per 100K Pop")+theme(legend.text=element_text(size=1))
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
qplot(PC1,PC2, data=scores, color= V1)+scale_color_gradient(low = "grey", high= 'red')+ggtitle("Cluster Plot of Cases and First two Principal Components")+labs(color = "Cases per 100K Pop")+theme(legend.text=element_text(size=10))
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
qplot(PC1,PC2, data=scores, color= V1)+scale_color_gradient(low = "grey", high= 'red')+ggtitle("Cluster Plot of Cases and First two Principal Components")+labs(color = "Cases")+theme(legend.text=element_text(size=10))
ggplot(covid, mapping = aes(days_since_first_infection1,cases1))+geom_point()+labs(y="Cases per 100K Pop", x= " Days since 1st Case")
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
qplot(PC1,PC2, data=scores, color= V1)+scale_color_gradient(low = "grey", high= 'red')+labs(color = "Cases")
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
qplot(PC1,PC2, data=scores, color= V1)+geom_point(size = 0.1, stroke = 0, shape = 16)+scale_color_gradient(low = "grey", high= 'red')+labs(color = "Cases")
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
qplot(PC1,PC2, data=scores, color= V1)+geom_point(size = 0.05, stroke = 0, shape = 16)+scale_color_gradient(low = "grey", high= 'red')+labs(color = "Cases")
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
qplot(PC1,PC2, data=scores, color= V1)+geom_point(size = 0.05, stroke = 0, shape = 12)+scale_color_gradient(low = "grey", high= 'red')+labs(color = "Cases")
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
qplot(PC1,PC2, data=scores, color= V1)+geom_point(size = 0.05, stroke = 0, shape = 19)+scale_color_gradient(low = "grey", high= 'red')+labs(color = "Cases")
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
ggplot(data=scores,mapping = aes(PC1,PC2, color= V1))+geom_point(size = 0.05, stroke = 0, shape = 16)+scale_color_gradient(low = "grey", high= 'red')+labs(color = "Cases")
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
ggplot(data=scores,mapping = aes(PC1,PC2, color= V1))+geom_point(size = 0.1, stroke = 0, shape = 16)+scale_color_gradient(low = "grey", high= 'red')+labs(color = "Cases")
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
ggplot(data=scores,mapping = aes(PC1,PC2, color= V1))+geom_point(size = 0.5, stroke = 0, shape = 16)+scale_color_gradient(low = "grey", high= 'red')+labs(color = "Cases")
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
ggplot(data=scores,mapping = aes(PC1,PC2, color= V1))+geom_point(size = 0.9, stroke = 0, shape = 16)+scale_color_gradient(low = "grey", high= 'red')+labs(color = "Cases")
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
ggplot(data=scores,mapping = aes(PC1,PC2, color= V1))+geom_point(size = 1, stroke = 0, shape = 16)+scale_color_gradient(low = "grey", high= 'red')+labs(color = "Cases")
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
ggplot(data=scores,mapping = aes(PC1,PC2, color= V1))+geom_point(size = 4, stroke = 0, shape = 16)+scale_color_gradient(low = "grey", high= 'red')+labs(color = "Cases")
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
ggplot(data=scores,mapping = aes(PC1,PC2, color= V1))+geom_point(size = 2, stroke = 0, shape = 16)+scale_color_gradient(low = "grey", high= 'red')+labs(color = "Cases")
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
ggplot(data=scores,mapping = aes(PC1,PC2, color= V1))+geom_point(size = 1, stroke = 0, shape = 16)+scale_color_gradient(low = "grey", high= 'red')+labs(color = "Cases")
scores = PCA$x
scores= cbind(covid$cases1, scores)
scores = as.data.frame(scores)
ggplot(data=scores,mapping = aes(PC1,PC2, color= V1))+geom_point(size = 1.5, stroke = 0, shape = 16)+scale_color_gradient(low = "grey", high= 'red')+labs(color = "Cases")
m12 <- vglm(cases ~ .-cases1, family = pospoisson(), data = covid)
covid = read.csv("covid2zargham.csv")
####################################################################
############## vGLM  with Total Cases ###############################
covid3= covid[, -c(1:3, 5, 37)]
m13 <- vglm(cases ~ ., family = pospoisson(), data = covid3)
summary(m13)
kable(names)
View(names)
kable(read.csv(variables))
kable(read.csv('variables.csv'))
kable(read.csv('variables.csv'))
kable(read.csv('variables.csv'))
install.packages("xtable")
library(xtable)
xtable(read.csv('variables'))
xtable(read.csv('variables.csv'))
colnames(covid)=cnames
View(covid)
covid3 = covid[, -c(1:5, 35)]
m1 <- vglm(cases1 ~ ., family = pospoisson(), data = covid3)
library(VGAM)
m1 <- vglm(cases1 ~ ., family = pospoisson(), data = covid3)
View(covid3)
m1 <- vglm(cases100K ~ ., family = pospoisson(), data = covid3)
m1 <- vglm(cases100k ~ ., family = pospoisson(), data = covid3)
xtable(m1)
install.packages("texreg")
library(texreg)
createTexreg(m1)
Texreg(m1)
texreg(m1)
texreg(list(m1)
texreg(list(m1))
texreg(list(m1))
d = summary(m1)
texreg(d)
xtable(d)
extract(m1, include.loglik = TRUE,
include.df = TRUE, include.nobs = TRUE, ...)
extract(m1, include.loglik = TRUE,
include.df = TRUE, include.nobs = TRUE)
m111 = vglm(cases100k ~ ., family = pospoisson(), data = covid3)
extract(m111, include.loglik = FALSE,include.df = TRUE, include.nobs = TRUE)
library(texreg)
extract(m111, include.loglik = FALSE,include.df = TRUE, include.nobs = TRUE)
d = extract(m111, include.loglik = FALSE,include.df = TRUE, include.nobs = TRUE)
d = extract.vglm(m111, include.loglik = FALSE,include.df = TRUE, include.nobs = TRUE)
extract.vglm(m111, include.loglik = FALSE,include.df = TRUE, include.nobs = TRUE)
d = summary(m111)
kable(m111)
library(kable)
library(kableExtra)
kable(m111)
library(pander)
pander(m111)
d =summaryvglm(m111)
pander(d@coef3)
pander(d@coef3, d@model)
texreg(d@coef3, d@model)
kable(d@coef3, d@model)
xtable(d@coef3, d@model)
pander(d@coef3, d@model)
pander(d@coef3, d@pearson.resid)
pander(d@pearson.resid)
d = summaryvglm(m12)
pander(d$coef)
d = summaryvglm(m12)
pander(d@coef3)
library(mosaic)
library(tidyverse)
library(Metrics)
library(gamlr)
library(margins)
library(rpart)
library(caret)
library(knitr)
library(kableExtra)
library(randomForest)
library(gbm)
library(ggplot2)
library(ggrepel)
library(plotmo)
library(VGAM)
library(factoextra)
library(pander)
data=read.csv("covid2zargham.csv")
names=read.table("names.txt")
cnames=names[,1]
colnames(data)=cnames
#### Create the subsample for training an testing ####
x<- data[-c(1:5,35)]
xtable(d@coef3)
xtable(d@coef3, d@df)
xtable(d@coef3, d@df.residual)
xtable(d@df.residual)
xtable(d@pearson.resid)
summary(m111)
d =summaryvglm(m111)
xtable(d@coef3)
