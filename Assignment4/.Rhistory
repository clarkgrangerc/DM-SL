tabulate(c)
c1=ifelse(loan$loan_status == "Current"|loan$loan_status == "Fully Paid", 1, 0)
setwd(C:/Users/clark/OneDrive/UTEXAS/Spring20/Data Mining/DM-SL/DM-SL/Assignment4)
setwd('C:/Users/clark/OneDrive/UTEXAS/Spring20/Data Mining/DM-SL/DM-SL/Assignment4')
loan <- read.csv('loanadj.csv')
View(loan)
loan <- read.csv('loanadj.csv')
gb = loan[which(loan$loan_status == "Current"|loan$loan_status == "Fully Paid" == 0),]
gb = loan[which(loan$loan_status == "Current"|loan$loan_status == "Fully Paid"),]
View(gb)
View(gb)
loan1 = loan[which(loan$loan_status == "Charged Off"|loan$loan_status == "Fully Paid"),]
View(loan1)
View(loan1)
data <- read.csv('loanadj.csv')
data <- read.csv('loanadj.csv')
loan = data[which(data$loan_status == "Charged Off"|data$loan_status == "Fully Paid"),]
loan$goodcredit=ifelse(loan$loan_status == "Fully Paid", 1, 0)
tabulate(goodcredit)
tabulate(loan$goodcredit)
loan <- cbind(loan, dummy(loan$home_ownership))
colnames(loan)[colnames(loan)=="loanOWN"] <- "home_own"
colnames(loan)[colnames(loan)=="loanRENT"] <- "home_rent"
colnames(loan)[colnames(loan)=="loanMORTGAGE"] <- "home_mort"
data= na.omit(data)
summary(loan)
loan$indv_app=ifelse(loan$application_type == "Individual", 1, 0)
loan$debt_consolidation=ifelse(loan$purpose == "debt_consolidation", 1, 0)
loan$fico=(loan$fico_range_high+loan$fico_range_low)/2
loan$loterm=ifelse(loan$term == "60 months", 1, 0)
loan$incver=loan$goodcredit=ifelse(loan$verification_status == "Verified" |
loan$verification_status == "Source Verified", 1, 0)
tabulate(loan$incver)
m1  = glm(goodcredit ~ (debt_consolidation+fico+loan_amnt+annual_inc+home_own
+home_mort+indv_app+term),data=loan,family = binomial)
summary(m1)
m1  = glm(goodcredit ~ (debt_consolidation+fico+loan_amnt+annual_inc+home_own
+home_mort+indv_app+loterm+incver),data=loan,family = binomial)
m1  = glm(goodcredit ~ (debt_consolidation+fico+loan_amnt+annual_inc+home_own
+home_mort+indv_app+loterm+incver),data=loan,family = binomial)
m1  = glm(goodcredit ~ (debt_consolidation+fico+loan_amnt+annual_inc+home_own
+home_mort+indv_app+loterm),data=loan,family = binomial)
summary(m1)
View(loan)
View(loan)
loan$incsecond = loan$annual_inc_joint - loan$annual_inc
View(loan)
View(loan)
summary(loan$incsecond)
loan[is.na(loan[102,])] <- 0
x<- loan[-c(1,3,4,6,7,9,11,12,13,17,18,25,26,27,34,76)]
View(x)
View(x)
data= na.omit(x)
x= na.omit(x)
m1  = glm(goodcredit ~ (debt_consolidation+fico+loan_amnt+annual_inc+home_own
+home_mort+indv_app+loterm),data=x,family = binomial)
summary(m1)
View(x)
View(x)
summary(x)
View(loan)
View(loan)
m1  = glm(goodcredit ~ (debt_consolidation+fico+loan_amnt+annual_inc+home_own
+home_mort+indv_app),data=x,family = binomial)
summary(m1)
loan$loterm=ifelse(loan$term == "60 months", 1, 0)
View(loan)
loan$loterm=ifelse(loan$term == " 60 months", 1, 0)
x<- loan[-c(1,3,4,6,7,9,11,12,13,17,18,25,26,27,34,76)]
x= na.omit(x)
summary(x)
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = gb[train_cases,]
x_test = gb[test_cases,]
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = gb[train_cases,]
x_test = gb[test_cases,]
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = gb[train_cases,]
x_test = gb[test_cases,]
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = gb[train_cases,]
x_test = gb[test_cases,]
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
m2 = randomForest(goodcredit ~ .,data = x_train, mtry = 5, ntree=500)
plot(m2)
varImpPlot(m2,type=2)
pred_test = predict(m2, x_test)
yhat_test = ifelse(pred_test> 0.5,1 ,0)
1-sum(yhat_test != x_test$goodcredit)/n_test ###Accuracy rate
1-sum(yhat_test != x_test$goodcredit)/n_test ###Accuracy rate
plot(yhat_test)
confusion_out = table(y = x_test$goodcredit, yhat = yhat_test)
confusion_out
plot(x_test$goodcredit)
x_test$goodcredit
sum(x_test$goodcredit)
sum(x$goodcredit)
tabulate(loan$goodcredit)
View(loan)
summary(loan$loan_status)
a=felse(loan$loan_status == "Fully Paid", 1, 0)
a=ifelse(loan$loan_status == "Fully Paid", 1, 0)
tabulate(a)
goodcredit=ifelse(loan$loan_status == "Fully Paid", 1, 0)
tabulate(loan$goodcredit)
data <- read.csv('loanadj.csv')
loan1 <- subset(data, data$loan_status == "Charged Off"|data$loan_status == "Fully Paid")
summary(loan1)
loan <- subset(data, data$loan_status == "Charged Off"|data$loan_status == "Fully Paid")
loan$goodcredit=ifelse(loan$loan_status == "Fully Paid", 1, 0)
tabulate(loan$goodcredit)
loan <- cbind(loan, dummy(loan$home_ownership))
colnames(loan)[colnames(loan)=="loanOWN"] <- "home_own"
colnames(loan)[colnames(loan)=="loanRENT"] <- "home_rent"
colnames(loan)[colnames(loan)=="loanMORTGAGE"] <- "home_mort"
loan$fico=(loan$fico_range_high+loan$fico_range_low)/2
loan$debt_consolidation=ifelse(loan$purpose == "debt_consolidation", 1, 0)
loan$indv_app=ifelse(loan$application_type == "Individual", 1, 0)
loan$loterm=ifelse(loan$term == " 60 months", 1, 0)
loan$incver=loan$goodcredit=ifelse(loan$verification_status == "Verified" |
loan$verification_status == "Source Verified", 1, 0)
loan$incsecond = loan$annual_inc_joint - loan$annual_inc
x<- loan[-c(1,3,4,6,7,9,11,12,13,17,18,25,26,27,34,76)]
tabulate(x$goodcredit)
tabulate(loan$goodcredit)
loan$goodcredit=ifelse(loan$loan_status == "Fully Paid", 1, 0)
tabulate(loan$goodcredit)
x<- loan[-c(1,3,4,6,7,9,11,12,13,17,18,25,26,27,34,76)]
tabulate(x$goodcredit)
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
tabulate(x_test$goodcredit)
tabulate(x_train$goodcredit)
m2 = randomForest(goodcredit ~ .,data = x_train, mtry = 5, ntree=500)
x= na.omit(x)
tabulate(x_test$goodcredit)
tabulate(x_train$goodcredit)
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
m2 = randomForest(goodcredit ~ .,data = x_train, mtry = 5, ntree=500)
yes
View(m2)
View(m2)
tabulate(loan$goodcredit)
loan$goodcredit=as.factor(loan$goodcredit)
a=as.factor(loan$goodcredit)
x<- loan[-c(1,3,4,6,7,9,11,12,13,17,18,25,26,27,34,76)]
tabulate(x$goodcredit)
loan$incver=as.factor(loan$goodcredit=ifelse(loan$verification_status == "Verified" |
loan$verification_status == "Source Verified", 1, 0))
tabulate(x_test$goodcredit)
tabulate(x_train$goodcredit)
tabulate(x$goodcredit)
x= na.omit(x)
tabulate(x$goodcredit)
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
tabulate(x_test$goodcredit)
tabulate(x_train$goodcredit)
m2 = randomForest(goodcredit ~ .,data = x_train, mtry = 5, ntree=500)
plot(m2)
pred_test = predict(m2, x_test)
yhat_test = ifelse(pred_test> 0.5,1 ,0)
pred_test
1-sum(pred_test != x_test$goodcredit)/n_test ###Accuracy rate
confusion_out = table(y = x_test$goodcredit, yhat = pred_test)
confusion_out
plot(x_tes$goodscore)
plot(x_test$goodscore)
varImpPlot(m2,type=2)
setwd('C:/Users/clark/OneDrive/UTEXAS/Spring20/Data Mining/DM-SL/DM-SL/Assignment4')
data <- read.csv('loanadj.csv')
loan <- subset(data, data$loan_status == "Charged Off"|data$loan_status == "Fully Paid")
loan$goodcredit=as.factor(ifelse(loan$loan_status == "Fully Paid", 1, 0))
tabulate(loan$goodcredit)
loan <- cbind(loan, dummy(loan$home_ownership))
colnames(loan)[colnames(loan)=="loanOWN"] <- "home_own"
colnames(loan)[colnames(loan)=="loanRENT"] <- "home_rent"
colnames(loan)[colnames(loan)=="loanMORTGAGE"] <- "home_mort"
tabulate(loan$goodcredit)
loan$fico=(loan$fico_range_high+loan$fico_range_low)/2
loan$debt_consolidation=ifelse(loan$purpose == "debt_consolidation", 1, 0)
loan$indv_app=ifelse(loan$application_type == "Individual", 1, 0)
tabulate(loan$indv_app)
summary(loan)
loan$incver=as.factor(loan$goodcredit=ifelse(loan$verification_status == "Verified" |
loan$verification_status == "Source Verified", 1, 0))
loan$incver=loan$goodcredit=ifelse(loan$verification_status == "Verified" |
loan$verification_status == "Source Verified", 1, 0)
tabulate(incver)
tabulate(loan$incver)
x<- loan[-c(1,3,4,6,7,9,11,12,13,17,18,25,26,27,34,74)]
tabulate(x$goodcredit)
tabulate(loan$goodcredit)
loan$goodcredit=as.factor(ifelse(loan$loan_status == "Fully Paid", 1, 0))
tabulate(loan$goodcredit)
x<- loan[-c(1,3,4,6,7,9,11,12,13,17,18,25,26,27,34,74)]
tabulate(x$goodcredit)
x= na.omit(x)
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
x<- loan[-c(1,3,4,6,7,8,9,11,12,13,14,17,18,25,26,27,34,74)]
tabulate(x$goodcredit)
x= na.omit(x)
tabulate(x$goodcredit)
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
tabulate(x_test$goodcredit)
tabulate(x_train$goodcredit)
m2 = randomForest(goodcredit ~ .,data = x_train, mtry = 5, ntree=500)
pred_test = predict(m2, x_test)
1-sum(pred_test != x_test$goodcredit)/n_test ###Accuracy rate
confusion_out = table(y = x_test$goodcredit, yhat = pred_test)
confusion_out
varImpPlot(m2,type=2)
View(x)
m1  = glm(goodcredit ~ .,data=x_train,family = binomial)
summary(m1)
pred_test1 = predict(m1, x_test)
pred_test1
yhat_test1 = ifelse(pred_test1> 0.5,1 ,0)
1-sum(yhat_test1 != x_test$goodcredit)/n_test ###Accuracy rate
tabulate(x_test$goodcredit)
tabulate(x_train$goodcredit)
m3 = gbm(goodcredit ~ .,
data = x_train,n.trees=5000, shrinkage=.05)
yhat_test3= predict(m3, gb_test, n.trees=5000)
yhat_test3= predict(m3, x_test, n.trees=5000)
yhat_test3
m2 = randomForest(goodcredit ~ (.)^2,data = x_train, mtry = 5, ntree=500)
tabulate(x_test$goodcredit)
tabulate(x_train$goodcredit)
pred_test = predict(m2, x_test)
1-sum(pred_test != x_test$goodcredit)/n_test ###Accuracy rate
varImpPlot(m2,type=2)
View(m3)
View(m3)
m3 = gbm(goodcredit ~ .,
data = x_train,n.trees=5000
m3 = gbm(goodcredit ~ .,
data = x_train,n.trees=5000)
m3 = gbm(goodcredit ~ .,
data = x_train,n.trees=5000)
yhat_test3= predict(m3, x_test, n.trees=5000)
m3 = gbm(goodcredit ~ .,data = x_train,n.trees=5000)
yhat_test3= predict(m3, x_test, n.trees=5000)
x$goodcredit=as.numeric(x$goodcredit)
tabulate(x$goodcredit)
x$goodcredit=as.numeric(x$goodcredit)
tabulate(x$goodcredit)
b=as.numeric(x$goodcredit)
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
tabulate(x_test$goodcredit)
tabulate(x_train$goodcredit)
m3 = gbm(goodcredit ~ .,data = x_train,n.trees=5000)
setwd("C:/Users/clark/OneDrive/UTEXAS/Spring20/Data Mining")
communities=read.table("communities.data",sep=",")
View(communities)
View(communities)
names=read.table("comnames.txt")
View(names)
cnames=as.vector(names[1])
communities=read.table("communities.data",sep=",",colnames=cnames)
communities=read.table("communities.data",sep=",",colnames="cnames")
View(names)
View(cnames)
cnames=(names[1])
cnames=as.list(names[1])
View(cnames)
View(cnames)
names
cnames=as.vector(names[1])
communities=read.table("communities.data",sep=",",colnames=names)
cnames=aframe(names[1])
cnames=names[['1']]
cnames
cnames=names['1']
cnames=names[,'1']
cnames=names[,1]
cnames
communities=read.table("communities.data",sep=",",colnames=cnames)
communities=read.table("communities.data",sep=",",colnames='cnames')
colnames(communities)=cnames
View(communities)
data<- communities[,-c(2:5,102:118,122:125,127)]
View(data)
data= na.omit(data)
n = nrow(data)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
data_train = data[train_cases,]
data_test = data[test_cases,]
m1  = glm(ViolentCrimesPerPop ~ .,data=data_train,family = binomial)
m1  = glm(ViolentCrimesPerPop ~ .,data=data_train)
summary(m1)
yhat_test1 = predict(m1, x_test)
yhat_test1 = predict(m1, data_test)
yhat_test1
m1  = glm(ViolentCrimesPerPop ~ .,data=data_train,familiy=binomial(link="logit"))
m1  = lm(ViolentCrimesPerPop ~ .,data=data_train)
summary(m1)
yhat_test1 = predict(m1, data_test)
ViolentCrimesPerPop
yhat_test1 = predict(m1, data_test)
write.csv(data,"C:/Users/clark/OneDrive/UTEXAS/Spring20/Data Mining/datacomm.csv",row.names = T)
communities2=read.table("comm_un.txt")
View(communities2)
communities2=read.table("comm_un.txt",sep=",")
names=read.table("comnames2.txt")
cnames=names[,1]
colnames(communities2)=cnames
View(communities2)
View(communities2)
summary(data)
data$OtherPerCap=as.numeric(data$OtherPerCap)
summary(data)
summary(data)
data$OtherPerCap=as.numeric(data$OtherPerCap/100)
summary(data)
n = nrow(data)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
data_train = data[train_cases,]
data_test = data[test_cases,]
data$OtherPerCap=as.numeric((data$OtherPerCap-mean(data$OtherPerCap)/sd(data$OtherPerCap)))
summary(data)
summary(data)
data<- communities[,-c(2:5,102:118,122:125,127)]
data$OtherPerCap=as.numeric((data$OtherPerCap-mean(data$OtherPerCap))/sd(data$OtherPerCap))
data<- communities[,-c(2:5,31,102:118,122:125,127)]
n = nrow(data)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
data_train = data[train_cases,]
data_test = data[test_cases,]
m1  = lm(ViolentCrimesPerPop ~ .,data=data_train)
summary(m1)
yhat_test1 = predict(m1, data_test)
yhat_test1
rmse(data_test$ViolentCrimesPerPop,yhat_test1)
m2 = randomForest(ViolentCrimesPerPop ~ .,data = data_train, mtry = 5, ntree=500)
plot(m2)
yhat_test2 = predict(m2, x_test)
yhat_test2 = predict(m2, data_test)
rmse(data_test$ViolentCrimesPerPop,yhat_test2)
m3 = gbm(ViolentCrimesPerPop ~ .,data = data_train,n.trees=5000)
yhat_test3= predict(m3, data_test, n.trees=5000)
rmse(data_test$ViolentCrimesPerPop,yhat_test3)
m1  = glm(ViolentCrimesPerPop ~ .,data=data_train,family=binomial(link="logit"))
m1  = glm(ViolentCrimesPerPop ~ .,data=data_train,family=binomial(link="logit"))
m1  = glm(ViolentCrimesPerPop ~ .,data=data_train,family=binomial)
m1  = glm(ViolentCrimesPerPop ~ .,data=data_train)
m2  = glm(ViolentCrimesPerPop ~ .,data=data_train)
yhat_test1 = predict(m2, data_test)
rmse(data_test$ViolentCrimesPerPop,yhat_test1)
m1  = lm(ViolentCrimesPerPop ~ .,data=data_train)
yhat_test1 = predict(m1, data_test)
rmse(data_test$ViolentCrimesPerPop,yhat_test1)
View(data)
View(communities)
data<- communities[,-c(1:5,31,102:118,122:125,127)]
m1  = lm(ViolentCrimesPerPop ~ .,data=data_train)
summary(m1)
yhat_test1 = predict(m1, data_test)
rmse(data_test$ViolentCrimesPerPop,yhat_test1)
m2 = randomForest(ViolentCrimesPerPop ~ .,data = data_train, mtry = 5, ntree=500)
plot(m2)
yhat_test2 = predict(m2, data_test)
rmse(data_test$ViolentCrimesPerPop,yhat_test2)
setwd("C:/Users/clark/OneDrive/UTEXAS/Spring20/Data Mining/DM-SL/DM-SL/Assignment4")
data=read.csv("covid2.csv")
View(data)
View(data)
View(data)
x<- data[-c(1,2,5)]
x= na.omit(x)
View(data)
View(data)
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
m2 = randomForest(cases ~ .,data = x_train, mtry = 5, ntree=500)
library(mosaic)
library(tidyverse)
library(Metrics)
library(gamlr)
library(margins)
library(rpart)
library(caret)
library(randomForest)
library(gbm)
library(dummies)
m1 = randomForest(cases ~ .,data = x_train, mtry = 5, ntree=500)
plot(m1)
pred_test = predict(m1, x_test)
1-sum(pred_test != x_test$cases)/n_test ###Accuracy rate
1-sum(pred_test != x_test$cases)/n_test ###Accuracy rate
1-sum(pred_test != x_test$cases)/n_test ###Accuracy rate
1-sum(pred_test != x_test$cases)/n_test ###Accuracy rate
1-sum(pred_test != x_test$cases)/n_test ###Accuracy rate
1-sum(pred_test != x_test$cases)/n_test ###Accuracy rate
confusion_out = table(y = x_test$goodcredit, yhat = pred_test)
confusion_out = table(y = x_test$cases, yhat = pred_test)
confusion_out
plot(pred_test)
varImp(m1)
varImpPlot(m1,type=2)
plot(x_test$cases)
View(data)
View(data)
x<- data[-c(1,2,3,5)]
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
m1 = randomForest(cases ~ .,data = x_train, mtry = 5, ntree=1000)
plot(m1)
yhat_test = predict(m1, x_test)
1-sum(yhat_test != x_test$cases)/n_test ###Accuracy rate
sum(yhat_test != x_test$cases)/n_test
varImpPlot(m1,type=2)
confusion_out = table(y = x_test$cases, yhat = yhat_test)
confusion_out
rmse(x_test$cases,yhat_test)
View(data)
View(data)
x<- data[-c(1,2,3)]
summary(x)
x<- data[-c(1,2,3)]
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
m1 = randomForest(deaths ~ .,data = x_train, mtry = 5, ntree=1000)
yhat_test = predict(m1, x_test)
1-sum(yhat_test != x_test$cases)/n_test ###Accuracy rate
varImpPlot(m1,type=2)
rmse(x_test$deaths,yhat_test)
datahos=read.csv("https://raw.githubusercontent.com/JieYingWu/COVID-19_US_County-level_Summaries/master/data/Hospitalization_all_locs.csv")
View(datahos)
summary(datahos)
