yhat_test1
m1  = glm(ViolentCrimesPerPop ~ .,data=data_train,familiy=binomial(link="logit"))
m1  = lm(ViolentCrimesPerPop ~ .,data=data_train)
summary(m1)
yhat_test1 = predict(m1, data_test)
ViolentCrimesPerPop
yhat_test1 = predict(m1, data_test)
write.csv(data,"C:/Users/clark/OneDrive/UTEXAS/Spring20/Data Mining/datacomm.csv",row.names = T)
communities2=read.table("comm_un.txt")
View(communities2)
communities2=read.table("comm_un.txt",sep=",")
names=read.table("comnames2.txt")
cnames=names[,1]
colnames(communities2)=cnames
View(communities2)
View(communities2)
summary(data)
data$OtherPerCap=as.numeric(data$OtherPerCap)
summary(data)
summary(data)
data$OtherPerCap=as.numeric(data$OtherPerCap/100)
summary(data)
n = nrow(data)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
data_train = data[train_cases,]
data_test = data[test_cases,]
data$OtherPerCap=as.numeric((data$OtherPerCap-mean(data$OtherPerCap)/sd(data$OtherPerCap)))
summary(data)
summary(data)
data<- communities[,-c(2:5,102:118,122:125,127)]
data$OtherPerCap=as.numeric((data$OtherPerCap-mean(data$OtherPerCap))/sd(data$OtherPerCap))
data<- communities[,-c(2:5,31,102:118,122:125,127)]
n = nrow(data)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
data_train = data[train_cases,]
data_test = data[test_cases,]
m1  = lm(ViolentCrimesPerPop ~ .,data=data_train)
summary(m1)
yhat_test1 = predict(m1, data_test)
yhat_test1
rmse(data_test$ViolentCrimesPerPop,yhat_test1)
m2 = randomForest(ViolentCrimesPerPop ~ .,data = data_train, mtry = 5, ntree=500)
plot(m2)
yhat_test2 = predict(m2, x_test)
yhat_test2 = predict(m2, data_test)
rmse(data_test$ViolentCrimesPerPop,yhat_test2)
m3 = gbm(ViolentCrimesPerPop ~ .,data = data_train,n.trees=5000)
yhat_test3= predict(m3, data_test, n.trees=5000)
rmse(data_test$ViolentCrimesPerPop,yhat_test3)
m1  = glm(ViolentCrimesPerPop ~ .,data=data_train,family=binomial(link="logit"))
m1  = glm(ViolentCrimesPerPop ~ .,data=data_train,family=binomial(link="logit"))
m1  = glm(ViolentCrimesPerPop ~ .,data=data_train,family=binomial)
m1  = glm(ViolentCrimesPerPop ~ .,data=data_train)
m2  = glm(ViolentCrimesPerPop ~ .,data=data_train)
yhat_test1 = predict(m2, data_test)
rmse(data_test$ViolentCrimesPerPop,yhat_test1)
m1  = lm(ViolentCrimesPerPop ~ .,data=data_train)
yhat_test1 = predict(m1, data_test)
rmse(data_test$ViolentCrimesPerPop,yhat_test1)
View(data)
View(communities)
data<- communities[,-c(1:5,31,102:118,122:125,127)]
m1  = lm(ViolentCrimesPerPop ~ .,data=data_train)
summary(m1)
yhat_test1 = predict(m1, data_test)
rmse(data_test$ViolentCrimesPerPop,yhat_test1)
m2 = randomForest(ViolentCrimesPerPop ~ .,data = data_train, mtry = 5, ntree=500)
plot(m2)
yhat_test2 = predict(m2, data_test)
rmse(data_test$ViolentCrimesPerPop,yhat_test2)
library(coronavirus)
install.packages("coronavirus")
install.packages("msvar")
# devtools::install_github("RamiKrispin/coronavirus")
library(mosaic)
library(tidyverse)
library(Metrics)
library(gamlr)
library(margins)
library(rpart)
library(caret)
library(randomForest)
library(gbm)
library(dummies)
library(coronavirus)
library(lubridate)
library(deSolve)
coronavirus=read.csv("https://raw.githubusercontent.com/RamiKrispin/coronavirus/master/csv/coronavirus.csv")
###### Fittting the SIR model
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta * I * S / N
dI <- beta * I * S / N - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
`%>%` <- magrittr::`%>%`
# extract the cumulative incidence
df <- coronavirus %>%
dplyr::filter(Country.Region == "Belgium") %>%
dplyr::group_by(date, type) %>%
dplyr::summarise(total = sum(cases, na.rm = TRUE)) %>%
tidyr::pivot_wider(
names_from = type,
values_from = total
) %>%
dplyr::arrange(date) %>%
dplyr::ungroup() %>%
dplyr::mutate(active = confirmed - death - recovered) %>%
dplyr::mutate(
confirmed_cum = cumsum(confirmed),
death_cum = cumsum(death),
recovered_cum = cumsum(recovered),
active_cum = cumsum(active)
)
# put the daily cumulative incidence numbers for Belgium from
# Feb 4 to March 30 into a vector called Infected
sir_start_date <- "2020-02-04"
sir_end_date <- "2020-03-30"
###Infected <- subset(df, date >= ymd(sir_start_date) & date <= ymd(sir_end_date))$active_cum
Infected = t(df[14:69,9])
# Create an incrementing Day vector the same length as our
# cases vector
Day <- 1:(length(Infected))
####times      <- seq(0, 70, by = 1) Taken from other example
# now specify initial values for N, S, I and R
N <- 11515793 #### Population of Belgium
init <- c(
S = N - Infected[1],
I = Infected[1],
R = 0
)
# define a function to calculate the residual sum of squares
# (RSS), passing in parameters beta and gamma that are to be
# optimised for the best fit to the incidence data
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma")
out <- ode(y = init, times = Day, func = SIR, parms = parameters)
fit <- out[, 3]
sum((Infected - fit)^2)
}
# now find the values of beta and gamma that give the
# smallest RSS, which represents the best fit to the data.
# Start with values of 0.5 for each, and constrain them to
# the interval 0 to 1.0
# install.packages("deSolve")
Opt <- optim(c(0.5, 0.5),
RSS,
method = "L-BFGS-B",
lower = c(0, 0),
upper = c(1, 1)
)
# check for convergence
Opt$message
##### Optimal values of beta and gamma
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
# time in days for predictions
t <- 1:as.integer(ymd(sir_end_date) + 1 - ymd(sir_start_date))
# get the fitted values from our SIR model
fitted_cumulative_incidence <- data.frame(ode(
y = init, times = t,
func = SIR, parms = Opt_par
))
# add a Date column and the observed incidence data
library(dplyr)
fitted_cumulative_incidence <- fitted_cumulative_incidence %>%
mutate(
Date = ymd(sir_start_date) + days(t - 1),
Country = "Belgium",
cumulative_incident_cases = Infected
)
library(ggplot2)
fitted_cumulative_incidence %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = I), colour = "red") +
geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
labs(
y = "Cumulative incidence",
title = "COVID-19 fitted vs observed cumulative incidence, Belgium",
subtitle = "(Red = fitted from SIR model, blue = observed)"
) +
theme_minimal()
fitted_cumulative_incidence <- fitted_cumulative_incidence %>%
mutate(
Date = ymd(sir_start_date) + days(t - 1),
Country = "Belgium",
cumulative_incident_cases = Infected
)
rlang::last_error()
fitted_cumulative_incidence %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = I), colour = "red") +
geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
labs(
y = "Cumulative incidence",
title = "COVID-19 fitted vs observed cumulative incidence, Belgium",
subtitle = "(Red = fitted from SIR model, blue = observed)"
) +
theme_minimal()
fitted_cumulative_incidence %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = I), colour = "red") +
geom_point(aes(y = cumulative_incident_cases), colour = "blue")
fitted_cumulative_incidence %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = I), colour = "red"
fitted_cumulative_incidence %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = I), colour = "red")
Date = ymd(sir_start_date) + days(t - 1)
library(ggplot2)
fitted_cumulative_incidence %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = I), colour = "red") +
geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
labs(
y = "Cumulative incidence",
title = "COVID-19 fitted vs observed cumulative incidence, Belgium",
subtitle = "(Red = fitted from SIR model, blue = observed)"
) +
theme_minimal()
fitted_cumulative_incidence
fitted_cumulative_incidence <- data.frame(ode(
y = init, times = t,
func = SIR, parms = Opt_par
))
View(fitted_cumulative_incidence)
View(fitted_cumulative_incidence)
fitted_cumulative_incidence %>%
ggplot(aes(x = time)) +
geom_line(aes(y = I), colour = "red") +
geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
labs(
y = "Cumulative incidence",
title = "COVID-19 fitted vs observed cumulative incidence, Belgium",
subtitle = "(Red = fitted from SIR model, blue = observed)"
) +
theme_minimal()
fitted_cumulative_incidence <- fitted_cumulative_incidence %>%
mutate(
Date = ymd(sir_start_date) + days(t - 1),
Country = "Belgium",
cumulative_incident_cases = t(Infected)
)
View(fitted_cumulative_incidence)
View(fitted_cumulative_incidence)
fitted_cumulative_incidence %>%
ggplot(aes(x = time)) +
geom_line(aes(y = I), colour = "red") +
geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
labs(
y = "Cumulative incidence",
title = "COVID-19 fitted vs observed cumulative incidence, Belgium",
subtitle = "(Red = fitted from SIR model, blue = observed)"
) +
theme_minimal()
Windows()
fitted_cumulative_incidence %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = I), colour = "red") +
geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
labs(
y = "Cumulative incidence",
title = "COVID-19 fitted vs observed cumulative incidence, Belgium",
subtitle = "(Red = fitted from SIR model, blue = observed)"
) +
theme_minimal()
install.packages("projections")
library(projections)
library(mosaic)
library(tidyverse)
library(Metrics)
library(gamlr)
library(margins)
library(rpart)
library(caret)
library(randomForest)
library(gbm)
library(dummies)
library(plotmo)
setwd("C:/Users/clark/OneDrive/UTEXAS/Spring20/Data Mining/DM-SL/DM-SL/Assignment4")
data=read.csv("covid2zargham.csv")
names=read.table("names.txt")
cnames=names[,1]
colnames(data)=cnames
x<- data[-c(1:5,35)]
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
m3 = gbm(cases100k ~ .,data = x_train,n.trees=5000, shrinkage=.05)
yhat_test3= predict(m3, x_test, n.trees=5000)
rmse(x_test$cases100k,yhat_test3)
summary(m3)
plot(m3, i.var = 3)
plot(m3, i.var = 4)
plot(m3, i.var = 2)
plot(m3, i.var = 1)
View(data)
View(data)
plot(m3, i.var = 31)
View(x)
View(x)
plot(m3, i.var = 26)
plot(m3, i.var = 27)
plot(m3, i.var = 9)
plot(m3, i.var = 3)
plot(m3, i.var = 30)
plot(m3, i.var = 5)
plot(m3, i.var = 5, xlab="unemployement rate")
plot(m3, i.var = 5, xlab="Unemployement Rate")
plot(m3, i.var = 5, xlab="Unemployement Rate",ylab="Cases per 100k pop")
partialPlot(m2, x_train[,1:30],x.var = "Stay_home_order")
partialPlot(m2, x_train[,1:30],x.var = "Stay_home_order")
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
m2 = randomForest(cases100k ~ (.)^2,data= x_train, mtry = 5, ntree=1000,importance=T)
plot(m2)
yhat_test2 = predict(m2, x_test)
rmse(x_test$cases100k,yhat_test2)
partialPlot(m2, x_train[,1:30],x.var = "Stay_home_order")
plot(m3, i.var = 3)
par(mfrow = c(2,2))
importanceplot(m2)
windows()
par(mfrow = c(2,2))
partialPlot(m2, x_train[,1:30],x.var = "Stay_home_order")
par(mfrow = c(2,2))
partialPlot(m2, x_train[,1:30],x.var = "Stay_home_order")
windows()
par(mfrow = c(2,2))
partialPlot(m2, x_train[,1:30],x.var = "Stay_home_order", main"Stay Home Order")
windows()
par(mfrow = c(2,2))
partialPlot(m2, x_train[,1:30],x.var = "Stay_home_order", main="Stay Home Order")
par(mfrow = c(2,2))
partialPlot(m2, x_train[,1:30],x.var = "Stay_home_order", main="Stay Home Order")
partialPlot(m2, x_train[,1:30],x.var = "3", main="Stay Home Order")
partialPlot(m2, x_train[,1:30],x.var =3, main="Stay Home Order")
par(mfrow = c(2,2))
plot(m3, i.var = 26)
par(mfrow = c(2,2))
plot(m3, i.var = 26)
par(mfrow = c(2,2))
partialPlot(m2, x_train[,1:30],x.var =3, main="Stay Home Order",xlab="")
plot(m3, i.var = 26)
plot(m3, i.var = 27)
partialPlot(m2, x_train[,1:30],x.var =27, main="Population Density",xlab="")
par(mfrow = c(2,2))
partialPlot(m2, x_train[,1:30],x.var =3, main="Stay Home Order",xlab="")
partialPlot(m2, x_train[,1:30],x.var =27, main="Population Density",xlab="")
plot(m3, i.var = 26)
partialPlot(m2, x_train[,1:30],x.var =26, main="Summer Max Temperature",xlab="")
partialPlot(m2, x_train[,1:30],x.var =26, main="Summer Max Temperature",xlab="",xlim=c(0,90))
varImpPlot(m2,type=2)
varImpPlot(m2,type=2)
partialPlot(m2, x_train[,1:30],x.var =5, main="Unemployement Rate",xlab="")
partialPlot(m2, x_train[,1:30],x.var =5, main="Unemployement Rate",xlab="",xlim=c(0,.1) )
partialPlot(m2, x_train[,1:30],x.var =5, main="Unemployement Rate",xlab="",xlim=c(0.3,.1) )
partialPlot(m2, x_train[,1:30],x.var =5, main="Unemployement Rate",xlab="",xlim=c(0.03,.1) )
partialPlot(m2, x_train[,1:30],x.var =3, main="Stay Home Order",xlab="")
partialPlot(m2, x_train[,1:30],x.var =3, main="Stay Home Order",xlab="",xlim=c(15,40))
partialPlot(m2, x_train[,1:30],x.var =27, main="Population Density",xlab="")
partialPlot(m2, x_train[,1:30],x.var =26, main="Summer Max Temperature",xlab="",xlim=c(0,90))
partialPlot(m2, x_train[,1:30],x.var =26, main="Summer Max Temperature",xlab="",xlim=c(50,90))
partialPlot(m2, x_train[,1:30],x.var =26, main="Summer Max Temperature",xlab="",xlim=c(50,100))
partialPlot(m2, x_train[,1:30],x.var =26, main="Summer Max Temperature",xlab="",xlim=c(50,95))
partialPlot(m2, x_train[,1:30],x.var =26, main="Summer Max Temperature",xlab="",xlim=c(50,92))
partialPlot(m2, x_train[,1:30],x.var =26, main="Summer Max Temperature",xlab="",xlim=c(50,90))
View(x)
View(x)
partialPlot(m2, x_train[,1:30],x.var =9, main="Population White Race",xlab="")
partialPlot(m2, x_train[,1:30],x.var =24, main="Population in Poverty",xlab="")
partialPlot(m2, x_train[,1:30],x.var =24, main="Population in Poverty",xlab="",xlim=c(0.2,1.2))
windows()
par(mfrow = c(3,3))
partialPlot(m2, x_train[,1:30],x.var =3, main="Stay Home Order",xlab="",xlim=c(15,40))
partialPlot(m2, x_train[,1:30],x.var =27, main="Population Density",xlab="")
partialPlot(m2, x_train[,1:30],x.var =26, main="Summer Max Temperature",xlab="",xlim=c(50,90))
partialPlot(m2, x_train[,1:30],x.var =5, main="Unemployement Rate",xlab="",xlim=c(0.03,.1))
partialPlot(m2, x_train[,1:30],x.var =9, main="Population White Race",xlab="")
partialPlot(m2, x_train[,1:30],x.var =24, main="Population in Poverty",xlab="",xlim=c(0.2,1.2))
View(x)
View(x)
partialPlot(m2, x_train[,1:30],x.var =7, main="Population Male Gender",xlab="",xlim=c(0.03,.1))
partialPlot(m2, x_train[,1:30],x.var =7, main="Population Male Gender",xlab="")
partialPlot(m2, x_train[,1:30],x.var =17, main="Occ Food and Services",xlab="")
partialPlot(m2, x_train[,1:30],x.var =17, main="Occ Food and Services",xlab="",xlim=c(0.03,0.11))
partialPlot(m2, x_train[,1:30],x.var =17, main="Occ Food and Services",xlab="",xlim=c(0.04,0.11))
partialPlot(m2, x_train[,1:30],x.var =17, main="Occ Food and Services",xlab="",xlim=c(0.05,0.11))
partialPlot(m2, x_train[,1:30],x.var =17, main="Occ Food and Services",xlab="",xlim=c(0.04,0.11),ylim=c(170,200))
partialPlot(m2, x_train[,1:30],x.var =17, main="Occ Food and Services",xlab="",xlim=c(0.04,0.11),ylim=c(175,195))
partialPlot(m2, x_train[,1:30],x.var =7, main="Population Male Gender",xlab="")
partialPlot(m2, x_train[,1:30],x.var =7, main="Population Male Gender",xlab="",xlim=c(0.5,.60))
partialPlot(m2, x_train[,1:30],x.var =3, main="Work place change",xlab="")
partialPlot(m2, x_train[,1:30],x.var =30, main="Work Place Change",xlab="")
partialPlot(m2, x_train[,1:30],x.var =30, main="Work Place Change",xlab="",xlim=c(-.8,-.2))
partialPlot(m2, x_train[,1:30],x.var =30, main="Work Place Change",xlab="",xlim=c(-.7,-.2))
partialPlot(m2, x_train[,1:30],x.var =28, main="Median Age",xlab="")
partialPlot(m2, x_train[,1:30],x.var =1, main="Median Age",xlab="")
windows()
par(mfrow = c(3,3))
partialPlot(m2, x_train[,1:30],x.var =27, main="Population Density",xlab="")
partialPlot(m2, x_train[,1:30],x.var =26, main="Summer Max Temperature",xlab="",xlim=c(50,90))
partialPlot(m2, x_train[,1:30],x.var =5, main="Unemployement Rate",xlab="",xlim=c(0.03,.1))
partialPlot(m2, x_train[,1:30],x.var =30, main="Work Place Change",xlab="",xlim=c(-.7,-.2))
partialPlot(m2, x_train[,1:30],x.var =9, main="Population White Race",xlab="")
partialPlot(m2, x_train[,1:30],x.var =24, main="Population in Poverty",xlab="",xlim=c(0.2,1.2))
partialPlot(m2, x_train[,1:30],x.var =17, main="Occupation Food and Services",xlab="",xlim=c(0.04,0.11),ylim=c(175,195))
partialPlot(m2, x_train[,1:30],x.var =7, main="Population Male Gender",xlab="",xlim=c(0.5,.60))
partialPlot(m2, x_train[,1:30],x.var =28, main="Median Age",xlab="")
partialPlot(m2, x_train[,1:30],x.var =7, main="Population Male Gender",xlab="",xlim=c(0.5,.60),ylim=(180,220))
partialPlot(m2, x_train[,1:30],x.var =7, main="Population Male Gender",xlab="",xlim=c(0.5,.60),ylim=c(180,220))
partialPlot(m2, x_train[,1:30],x.var =21, main="Median Age",xlab="")
windows()
varImpPlot(m2,type=2)
partialPlot(m2, x_train[,1:30],x.var =21, main="Workers drivin Alone",xlab="",xlim=c(.1,.4))
partialPlot(m2, x_train[,1:30],x.var =21, main="Workers drivin Alone",xlab="",xlim=c(.1,.4))
varImpPlot(m2,type=2)
partialPlot(m2, x_train[,1:30],x.var =15, main="Median Age",xlab="")
windows()
varImpPlot(m2,type=2)
partialPlot(m2, x_train[,1:30],x.var =1, main="Days Since First Case",xlab="")
partialPlot(m2, x_train[,1:30],x.var =1, main="Days Since First Case",xlab="",xlim=c(20,60))
windows()
par(mfrow = c(3,3))
partialPlot(m2, x_train[,1:30],x.var =27, main="Population Density",xlab="")
partialPlot(m2, x_train[,1:30],x.var =1, main="Days Since First Case",xlab="",xlim=c(20,60))
partialPlot(m2, x_train[,1:30],x.var =21, main="Workers driving Alone",xlab="",xlim=c(.1,.4))
partialPlot(m2, x_train[,1:30],x.var =9, main="Population White Race",xlab="")
partialPlot(m2, x_train[,1:30],x.var =26, main="Summer Max Temperature",xlab="",xlim=c(50,90))
partialPlot(m2, x_train[,1:30],x.var =24, main="Population in Poverty",xlab="",xlim=c(0.2,1.2))
partialPlot(m2, x_train[,1:30],x.var =17, main="Occupation Food and Services",xlab="",xlim=c(0.04,0.11),ylim=c(175,195))
partialPlot(m2, x_train[,1:30],x.var =7, main="Population Male Gender",xlab="",xlim=c(0.5,.60),ylim=c(180,220))
partialPlot(m2, x_train[,1:30],x.var =28, main="Median Age",xlab="")
windows()
par(mfrow = c(2,2))
importanceplot(m2)
plot(m3)
summary(m3)
partialPlot(m2, x_train[,1:30],x.var =5, main="Population in Poverty",xlab="",xlim=c(0.2,1.2))
partialPlot(m2, x_train[,1:30],x.var =5, main="Population in Poverty",xlab="")
partialPlot(m2, x_train[,1:30],x.var =5, main="Population in Poverty",xlab="",xlim=c(0.03,0.12))
rmse(x_test$cases100k,yhat_test3)
rmse(x_test$cases100k,yhat_test2)
partialPlot(m2, x_train[,1:30],x.var =7, main="Population Male Gender",xlab="",xlim=c(0.5,.60),ylim=c(180,220))
round(rmse(x_test$cases100k,yhat_test3))
data=read.csv("covid2zargham.csv")
names=read.table("names.txt")
cnames=names[,1]
colnames(data)=cnames
#data$lcases=log(data$cases)
#data$Total_Population=log(data$Total_Population)
#data$Housing_units=log(data$Housing_units)
#data$Household_Income=log(data$Household_Income)
#data$Population_density_sqrm=log(data$Population_density_sqrm)
#data$Housing_density_sqrm=log(data$Housing_density_sqrm)
#### Create the subsample for training an testing ####
x<- data[-c(1:5,35)]c
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
# re-split into train and test cases with the same sample sizes
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
######################################
############ Random Forest ###########
######################################
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
######################################
############ Random Forest ###########
######################################
n = nrow(x)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
x_train = x[train_cases,]
x_test = x[test_cases,]
m2 = randomForest(cases100k ~ (.)^2,data= x_train, mtry = 5, ntree=1000,importance=T)
plot(m2)
yhat_test2 = predict(m2, x_test)
rrf=round(rmse(x_test$cases100k,yhat_test2))
rrf
partialPlot(m2, x_train[,1:30],x.var =7, main="Population Male Gender",xlab="",xlim=c(0.5,.60),ylim=c(180,220))
partialPlot(m2, x_train[,1:30],x.var =7, main="Population Male Gender",xlab="",xlim=c(0.5,.60))
partialPlot(m2, x_train[,1:30],x.var =7, main="Population Male Gender",xlab="",xlim=c(0.5,.60),ylim=c(180,260))
